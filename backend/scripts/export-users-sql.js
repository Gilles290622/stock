#!/usr/bin/env node
// Export local users/profiles (SQLite) to a MySQL-compatible SQL file for Hostinger import
const fs = require('fs');
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '..', '.env') });

// Force local DB to SQLite
process.env.DB_DRIVER = process.env.DB_DRIVER || 'sqlite';
process.env.SQLITE_FILE = process.env.SQLITE_FILE || path.join(__dirname, '..', 'data', 'app.sqlite');
const db = require('../config/db');

function sqlEscape(val) {
  if (val === null || val === undefined) return 'NULL';
  const s = String(val);
  return "'" + s.replace(/\\/g, "\\\\").replace(/'/g, "''") + "'";
}

async function main() {
  // Output file under deploy/hostinger/sql
  const outDir = path.join(__dirname, '..', '..', 'deploy', 'hostinger', 'sql');
  const outFile = path.join(outDir, 'export_users_profiles.sql');
  fs.mkdirSync(outDir, { recursive: true });

  const conn = await db.getConnection();
  try {
    const lines = [];
    lines.push('-- Export generated by export-users-sql.js');
    lines.push('SET NAMES utf8mb4;');
    lines.push('SET FOREIGN_KEY_CHECKS=0;');
    lines.push('');
    // Ensure tables exist
    lines.push('-- Ensure users table exists (minimal columns)');
    lines.push(
      'CREATE TABLE IF NOT EXISTS users (\n' +
      '  id INT PRIMARY KEY,\n' +
      '  full_name VARCHAR(255) NOT NULL,\n' +
      '  email VARCHAR(190) NOT NULL UNIQUE,\n' +
      "  password VARCHAR(255) NOT NULL,\n" +
      "  created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP\n" +
      ') ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;'
    );
    lines.push('');
    lines.push('-- Ensure profiles table exists');
    lines.push(
      'CREATE TABLE IF NOT EXISTS profiles (\n' +
      '  id INT AUTO_INCREMENT PRIMARY KEY,\n' +
      '  user_id INT NOT NULL UNIQUE,\n' +
      '  username VARCHAR(190) UNIQUE,\n' +
      "  role VARCHAR(50) DEFAULT 'user',\n" +
      "  status VARCHAR(50) DEFAULT 'active',\n" +
      '  entreprise VARCHAR(255) NULL,\n' +
      '  created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,\n' +
      '  CONSTRAINT fk_profiles_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n' +
      ') ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;'
    );
    lines.push('');

    // Users
    const [users] = await conn.query('SELECT id, full_name, email, password FROM users ORDER BY id ASC');
    lines.push('-- Upsert users');
    for (const u of users) {
      const row = [u.id, sqlEscape(u.full_name || ''), sqlEscape(u.email || `user${u.id}@local`), sqlEscape(u.password || '')];
      lines.push(
        'INSERT INTO users (id, full_name, email, password) VALUES (' +
        row.join(', ') +
        ') ON DUPLICATE KEY UPDATE full_name=VALUES(full_name), email=VALUES(email), password=VALUES(password);'
      );
    }
    lines.push('');

    // Profiles (local SQLite may not have entreprise -> use NULL)
    let profiles = [];
    try {
      const [rows] = await conn.query('SELECT user_id, username, role, status FROM profiles ORDER BY user_id ASC');
      profiles = rows || [];
    } catch (e) {
      profiles = [];
    }
    lines.push('-- Upsert profiles');
    for (const p of profiles) {
      const row = [p.user_id, sqlEscape(p.username || null), sqlEscape(p.role || 'user'), sqlEscape(p.status || 'active'), 'NULL'];
      lines.push(
        'INSERT INTO profiles (user_id, username, role, status, entreprise) VALUES (' +
        row.join(', ') +
        ') ON DUPLICATE KEY UPDATE username=VALUES(username), role=VALUES(role), status=VALUES(status), entreprise=VALUES(entreprise);'
      );
    }
    lines.push('');
    lines.push('SET FOREIGN_KEY_CHECKS=1;');

    fs.writeFileSync(outFile, lines.join('\n'), 'utf8');
    console.log('Export writen to', outFile, 'Users:', users.length, 'Profiles:', profiles.length);
  } catch (e) {
    console.error('export-users-sql error:', e && (e.stack || e.message) || e);
    process.exit(1);
  } finally {
    conn.release();
  }
}

main();
